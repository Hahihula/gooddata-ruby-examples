=== Perform an operation on multiple projects
by Tomas Svarovsky

==== TODO
- create scheduling
- check if it works
- link other recipes

==== Problem
You already knwo how to do many things but now you would like to do the same thing on many projects at once

==== Solution

The basis of the solution is pretty simple. We need to iterate over projects and perform the operation on each of those. So we do something real in the projects we will combine several other recipes so you can see how to combine recipes to solve more complex problems. So this is what we will do.

We will compile a list of reports from each project which were changed in last week by somebody from gooddata. If there is more than one revision we assume that this is something that is changing more often and we will create a scheduled email for our testing department to verify their correctness. Also to make their life a little easier we tag the reports by tag "to_be_checked".

This is a lot to do. Let's try to break the tasks down to smaller pieces.

[source,ruby]
----
projects = [
  GoodData::Project['project_pid_a'],
  GoodData::Project['project_pid_b']
]
projects.each do |project|
  GoodData.with_project do |project|
    # do your thing
  end
end
----

[source,ruby]
----
reports_to_tag = GoodData::Report.all(full: true)
  .select { |reports| report.updated_at > 2.weeks.ago }
  .select { |report| report.revisions.count > 1 }
----

[source,ruby]
----
GoodData::Report.find_by_tag('to_be_checked').each do |report|
  report.remove_tag('to_be_checked')
  report.save
end
----

[source,ruby]
----
reports_to_tag.each do |report|
  report.add_tag('to_be_checked')
  report.save
end
----


[source,ruby]
----
SCHEDULE TBD
----

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

projects = [
  GoodData::Project['project_pid_a'],
  GoodData::Project['project_pid_b']
]

results = projects.map do |project|
  GoodData.with_project do |project|

    reports_to_validate = GoodData::Report.all(full: true)
      .select { |reports| report.updated_at > 2.weeks.ago }
      .select { |report| report.revisions.count > 1 }

    GoodData::Report.find_by_tag('to_be_checked').each do |report|
      report.remove_tag('to_be_checked')
      report.save
    end

    reports_to_validate.each do |report|
      report.add_tag('to_be_checked')
      report.save
    end
    
    { project: project, :reports_to_validate reports_to_validate.count }
  end
end

results.each do |result|
  puts "#{result[:project].pid}: there are #{result[:reports_to_validate]} reports to check"
end

# And disconnect finally
puts 'Disconnecting ...'
GoodData.disconnect
----

==== Discussion

- discuss parallel execution
- discuss several ways to pass project pids
