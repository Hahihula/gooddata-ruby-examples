=== Perform an operation on multiple projects
by Tomas Svarovsky

==== Problem
You already know how to do many things but now you would like to do the same thing on many projects at once.

==== Solution
The basis of the solution is pretty simple. We need to iterate over projects and perform an operation on each of them.

Lets illustrate this on a simple example. We will compile a list of all reports from user's projects that have been changed since last week by somebody from GoodData. If there is more than one revision in a report we'll assume that the report is changing frequently and tag it with 'to_be_checked' tag for QA to validate the report.

This is a lot to do. Let's try to break the tasks down to smaller pieces.

===== Work with many projects

[source,ruby]
----
projects = [
  GoodData::Project['project_pid_a'],
  GoodData::Project['project_pid_b']
]
GoodData.with_connection('user', 'password') do |c|
  projects.each do |project|
    GoodData.with_project(project) do |project|
      # do your thing
    end
  end
end
----

===== Select specific reports

[source,ruby]
----
reports_to_tag = project.reports
                   .select { |report| report.updated_at > 2.weeks.ago }
                   .select { |report| report.revisions.count > 1 }
----

===== Remove tag
We'll first remove the 'to_be_checked' tag from all reports

[source,ruby]
----
GoodData::Report.find_by_tag('to_be_checked', :project => project).each do |report|
  report.remove_tag('to_be_checked')
  report.save
end
----

===== Add tag
Then we'll add the 'to_be_checked' tag to all qualifying reports

[source,ruby]
----
reports_to_tag.each do |report|
  report.add_tag('to_be_checked')
  report.save
end
----

===== Full example - all pieces together

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

client = GoodData.connect('user', 'password')

projects = [
  client.projects('project_pid_a'),
  client.projects('project_pid_b')
]

GoodData.with_connection('user', 'password') do |client|
  results = projects.map do |project|
    GoodData.with_project(project) do |project|

      reports_to_validate = project.reports
                              .select { |report| report.updated_at > 2.weeks.ago }
                              .select { |report| report.revisions.count > 1 }

      GoodData::Report.find_by_tag('to_be_checked', :project => project).each do |report|
        report.remove_tag('to_be_checked')
        report.save
      end

      reports_to_validate.each do |report|
        report.add_tag('to_be_checked')
        report.save
      end

      {project: project, reports_to_validate: reports_to_validate.count}
    end
  end

  results.each do |result|
    puts "#{result[:project].pid}: there are #{result[:reports_to_validate]} reports to check"
  end
end

# And disconnect finally
puts 'Disconnecting ...'
GoodData.disconnect
----

==== Discussion
Please note that the reports in projects are processed sequentially (one after another).